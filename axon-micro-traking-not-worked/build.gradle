buildscript {
  ext {
    javaVersion = '1.8'
    vavrVersion = '0.9.2'
    slf4jVersion = '1.7.25'
    kotlinVersion = '1.2.50'
    jgivenVersion = '0.15.3'
    logbackVersion = '1.2.3'
    lombokVersion = '1.16.20'
    junitJupiterVersion = '5.2.0'
    junitPlatformVersion = '1.2.0'
    jacksonKotlinVersion = '2.9.5'
    springCloudVersion = 'Finchley.RC1'
    springCloudVersion = '2.0.3.RELEASE'
    asciidoctorjPdfVersion = '1.5.0-alpha.15'
    hamcrestVersion = '1.3'
    junit4Version = '4.12'
  }

  dependencies {
    classpath "org.asciidoctor:asciidoctorj-pdf:$asciidoctorjPdfVersion"
  }
}

plugins {
  id 'idea'
  id 'eclipse'
  id 'com.avast.gradle.docker-compose' version '0.6.13'
  id 'org.jetbrains.kotlin.jvm' version '1.2.50' apply false
  id 'org.jetbrains.kotlin.plugin.noarg' version '1.2.50' apply false
  id 'org.jetbrains.kotlin.plugin.spring' version '1.2.50' apply false
  id 'org.jetbrains.kotlin.plugin.allopen' version '1.2.50' apply false
  id 'io.spring.dependency-management' version '1.0.5.RELEASE' apply false
  id 'com.github.johnrengelman.shadow' version '2.0.2' apply false
  id 'io.franzbecker.gradle-lombok' version '1.14' apply false
  id 'org.ajoberstar.git-publish' version '0.3.0' apply false
  id 'org.asciidoctor.convert' version '1.5.7' apply false
  id 'cn.bestwu.propdeps-eclipse' version '0.0.10' apply false
  id 'cn.bestwu.propdeps-maven' version '0.0.10' apply false
  id 'cn.bestwu.propdeps-idea' version '0.0.10' apply false
  id 'cn.bestwu.propdeps' version '0.0.10' apply false
}

wrapper {
  gradleVersion = '4.8'
  distributionType = 'BIN'
}

apply from: "$rootDir/gradle/ide.gradle"
apply from: "$rootDir/gradle/clean.gradle"
apply from: "$rootDir/gradle/repositories.gradle"

allprojects {

  apply plugin: 'base'
  apply plugin: 'maven'

  group = 'com.github.daggerok'
  version = '0.0.1'

  defaultTasks 'clean', 'build'
}

/*//executable sub-project build.gradle:
apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'

mainClassName = 'daggerok.AppKt'
shadowJar.mustRunAfter jar
*/

subprojects {

  apply plugin: 'java'

  sourceCompatibility = targetCompatibility = "$javaVersion"

  apply plugin: 'io.spring.dependency-management'

  /*
  dependencyManagement {
    imports {
      mavenBom "org.springframework.boot:spring-boot-dependencies:$springBootVersion"
      mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"
    }
  }
  */

  apply plugin: 'kotlin'
  apply plugin: 'org.jetbrains.kotlin.plugin.noarg'
  apply plugin: 'org.jetbrains.kotlin.plugin.spring'
  apply plugin: 'org.jetbrains.kotlin.plugin.allopen'

  compileKotlin {
    incremental = true
    kotlinOptions {
      freeCompilerArgs = ['-Xjsr305=strict']
      jvmTarget = "$javaVersion"
    }
  }

  compileTestKotlin {
    incremental = true
    kotlinOptions {
      freeCompilerArgs = ['-Xjsr305=strict']
      jvmTarget = "$javaVersion"
    }
  }

  compileJava.dependsOn(processResources)

  apply plugin: 'io.franzbecker.gradle-lombok'

  lombok {
    version = project.lombokVersion
  }

  dependencies {

    // In java we trust...
    compile("io.vavr:vavr:$vavrVersion")
    compile("org.slf4j:slf4j-api:$slf4jVersion")
    compile("ch.qos.logback:logback-classic:$logbackVersion")

    // Kotlin
    compile("com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonKotlinVersion")
    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion")
    compile("org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion")

    testCompile("org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion")
  }
}

apply from: "$rootDir/gradle/junit.gradle"
apply from: "$rootDir/gradle/findbugs.gradle"
apply from: "$rootDir/gradle/docker-compose.gradle"
apply from: "$rootDir/gradle/docs.gradle"

/*
// spring-boot multi-module preamble:
// this in dependencies closure really doesn't work:
// compile project(':submodule').sourceSets.main.output // dot't do this!

// 1. in spring-boot submodules use next configs:

bootJar {
  enabled = false
}
jar {
  enabled = true
}

// 2. in spring-boot target main module to fix gradle compile build + lombok issue use all of these:

dependencies {
  annotationProcessor(project(':submodule'))
  compileOnly(project(':submodule'))
  compile(project(':submodule'))
}
*/
